// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef PROTOBUF_network_2eproto__INCLUDED
#define PROTOBUF_network_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace network {
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LayerParam;
class LayerParamDefaultTypeInternal;
extern LayerParamDefaultTypeInternal _LayerParam_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
}  // namespace network

namespace network {

namespace protobuf_network_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_network_2eproto

// ===================================================================

class LayerParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.LayerParam) */ {
 public:
  LayerParam();
  virtual ~LayerParam();

  LayerParam(const LayerParam& from);

  inline LayerParam& operator=(const LayerParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParam& default_instance();

  static inline const LayerParam* internal_default_instance() {
    return reinterpret_cast<const LayerParam*>(
               &_LayerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LayerParam* other);

  // implements Message ----------------------------------------------

  inline LayerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerParam& from);
  void MergeFrom(const LayerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float weights = 6;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 6;
  float weights(int index) const;
  void set_weights(int index, float value);
  void add_weights(float value);
  const ::google::protobuf::RepeatedField< float >&
      weights() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weights();

  // repeated float biases = 7;
  int biases_size() const;
  void clear_biases();
  static const int kBiasesFieldNumber = 7;
  float biases(int index) const;
  void set_biases(int index, float value);
  void add_biases(float value);
  const ::google::protobuf::RepeatedField< float >&
      biases() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_biases();

  // repeated uint32 input_shape = 9;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 9;
  ::google::protobuf::uint32 input_shape(int index) const;
  void set_input_shape(int index, ::google::protobuf::uint32 value);
  void add_input_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      input_shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_input_shape();

  // repeated uint32 output_shape = 10;
  int output_shape_size() const;
  void clear_output_shape();
  static const int kOutputShapeFieldNumber = 10;
  ::google::protobuf::uint32 output_shape(int index) const;
  void set_output_shape(int index, ::google::protobuf::uint32 value);
  void add_output_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      output_shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_output_shape();

  // repeated uint32 kernel_shape = 11;
  int kernel_shape_size() const;
  void clear_kernel_shape();
  static const int kKernelShapeFieldNumber = 11;
  ::google::protobuf::uint32 kernel_shape(int index) const;
  void set_kernel_shape(int index, ::google::protobuf::uint32 value);
  void add_kernel_shape(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_shape();

  // repeated uint32 stride = 12;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 12;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 padding = 13;
  int padding_size() const;
  void clear_padding();
  static const int kPaddingFieldNumber = 13;
  ::google::protobuf::uint32 padding(int index) const;
  void set_padding(int index, ::google::protobuf::uint32 value);
  void add_padding(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      padding() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_padding();

  // repeated string class_names = 21;
  int class_names_size() const;
  void clear_class_names();
  static const int kClassNamesFieldNumber = 21;
  const ::std::string& class_names(int index) const;
  ::std::string* mutable_class_names(int index);
  void set_class_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_class_names(int index, ::std::string&& value);
  #endif
  void set_class_names(int index, const char* value);
  void set_class_names(int index, const char* value, size_t size);
  ::std::string* add_class_names();
  void add_class_names(const ::std::string& value);
  #if LANG_CXX11
  void add_class_names(::std::string&& value);
  #endif
  void add_class_names(const char* value);
  void add_class_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& class_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_names();

  // optional string pool_fn = 24;
  bool has_pool_fn() const;
  void clear_pool_fn();
  static const int kPoolFnFieldNumber = 24;
  const ::std::string& pool_fn() const;
  void set_pool_fn(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_fn(::std::string&& value);
  #endif
  void set_pool_fn(const char* value);
  void set_pool_fn(const char* value, size_t size);
  ::std::string* mutable_pool_fn();
  ::std::string* release_pool_fn();
  void set_allocated_pool_fn(::std::string* pool_fn);

  // optional uint32 local_size = 15;
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 15;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional bool apply_col2im = 14 [default = true];
  bool has_apply_col2im() const;
  void clear_apply_col2im();
  static const int kApplyCol2ImFieldNumber = 14;
  bool apply_col2im() const;
  void set_apply_col2im(bool value);

  // optional uint32 dilation = 16 [default = 1];
  bool has_dilation() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 16;
  ::google::protobuf::uint32 dilation() const;
  void set_dilation(::google::protobuf::uint32 value);

  // optional float alpha = 19 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 19;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 20 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 20;
  float beta() const;
  void set_beta(float value);

  // @@protoc_insertion_point(class_scope:network.LayerParam)
 private:
  void set_has_dilation();
  void clear_has_dilation();
  void set_has_apply_col2im();
  void clear_has_apply_col2im();
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_pool_fn();
  void clear_has_pool_fn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > weights_;
  ::google::protobuf::RepeatedField< float > biases_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > output_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > padding_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_names_;
  ::google::protobuf::internal::ArenaStringPtr pool_fn_;
  ::google::protobuf::uint32 local_size_;
  bool apply_col2im_;
  ::google::protobuf::uint32 dilation_;
  float alpha_;
  float beta_;
  friend struct protobuf_network_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Layer* other);

  // implements Message ----------------------------------------------

  inline Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string prev = 3;
  int prev_size() const;
  void clear_prev();
  static const int kPrevFieldNumber = 3;
  const ::std::string& prev(int index) const;
  ::std::string* mutable_prev(int index);
  void set_prev(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_prev(int index, ::std::string&& value);
  #endif
  void set_prev(int index, const char* value);
  void set_prev(int index, const char* value, size_t size);
  ::std::string* add_prev();
  void add_prev(const ::std::string& value);
  #if LANG_CXX11
  void add_prev(::std::string&& value);
  #endif
  void add_prev(const char* value);
  void add_prev(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& prev() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_prev();

  // repeated string next = 4;
  int next_size() const;
  void clear_next();
  static const int kNextFieldNumber = 4;
  const ::std::string& next(int index) const;
  ::std::string* mutable_next(int index);
  void set_next(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_next(int index, ::std::string&& value);
  #endif
  void set_next(int index, const char* value);
  void set_next(int index, const char* value, size_t size);
  ::std::string* add_next();
  void add_next(const ::std::string& value);
  #if LANG_CXX11
  void add_next(::std::string&& value);
  #endif
  void add_next(const char* value);
  void add_next(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& next() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_next();

  // required string name = 22;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 22;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 23;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 23;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required .network.LayerParam params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::network::LayerParam& params() const;
  ::network::LayerParam* mutable_params();
  ::network::LayerParam* release_params();
  void set_allocated_params(::network::LayerParam* params);

  // @@protoc_insertion_point(class_scope:network.Layer)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_params();
  void clear_has_params();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> prev_;
  ::google::protobuf::RepeatedPtrField< ::std::string> next_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::network::LayerParam* params_;
  friend struct protobuf_network_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Network : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.Network) */ {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Network& default_instance();

  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Network* other);

  // implements Message ----------------------------------------------

  inline Network* New() const PROTOBUF_FINAL { return New(NULL); }

  Network* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Network* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .network.Layer layers = 8;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 8;
  const ::network::Layer& layers(int index) const;
  ::network::Layer* mutable_layers(int index);
  ::network::Layer* add_layers();
  ::google::protobuf::RepeatedPtrField< ::network::Layer >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::network::Layer >&
      layers() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint32 num_layers = 5;
  bool has_num_layers() const;
  void clear_num_layers();
  static const int kNumLayersFieldNumber = 5;
  ::google::protobuf::uint32 num_layers() const;
  void set_num_layers(::google::protobuf::uint32 value);

  // optional bool use_threads = 17 [default = false];
  bool has_use_threads() const;
  void clear_use_threads();
  static const int kUseThreadsFieldNumber = 17;
  bool use_threads() const;
  void set_use_threads(bool value);

  // optional bool use_gpu = 18 [default = true];
  bool has_use_gpu() const;
  void clear_use_gpu();
  static const int kUseGpuFieldNumber = 18;
  bool use_gpu() const;
  void set_use_gpu(bool value);

  // @@protoc_insertion_point(class_scope:network.Network)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_num_layers();
  void clear_has_num_layers();
  void set_has_use_threads();
  void clear_has_use_threads();
  void set_has_use_gpu();
  void clear_has_use_gpu();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::network::Layer > layers_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 num_layers_;
  bool use_threads_;
  bool use_gpu_;
  friend struct protobuf_network_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParam

// repeated uint32 input_shape = 9;
inline int LayerParam::input_shape_size() const {
  return input_shape_.size();
}
inline void LayerParam::clear_input_shape() {
  input_shape_.Clear();
}
inline ::google::protobuf::uint32 LayerParam::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.input_shape)
  return input_shape_.Get(index);
}
inline void LayerParam::set_input_shape(int index, ::google::protobuf::uint32 value) {
  input_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.input_shape)
}
inline void LayerParam::add_input_shape(::google::protobuf::uint32 value) {
  input_shape_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.input_shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LayerParam::input_shape() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.input_shape)
  return input_shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LayerParam::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.input_shape)
  return &input_shape_;
}

// repeated uint32 output_shape = 10;
inline int LayerParam::output_shape_size() const {
  return output_shape_.size();
}
inline void LayerParam::clear_output_shape() {
  output_shape_.Clear();
}
inline ::google::protobuf::uint32 LayerParam::output_shape(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.output_shape)
  return output_shape_.Get(index);
}
inline void LayerParam::set_output_shape(int index, ::google::protobuf::uint32 value) {
  output_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.output_shape)
}
inline void LayerParam::add_output_shape(::google::protobuf::uint32 value) {
  output_shape_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.output_shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LayerParam::output_shape() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.output_shape)
  return output_shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LayerParam::mutable_output_shape() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.output_shape)
  return &output_shape_;
}

// repeated float weights = 6;
inline int LayerParam::weights_size() const {
  return weights_.size();
}
inline void LayerParam::clear_weights() {
  weights_.Clear();
}
inline float LayerParam::weights(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.weights)
  return weights_.Get(index);
}
inline void LayerParam::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.weights)
}
inline void LayerParam::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.weights)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParam::weights() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.weights)
  return weights_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParam::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.weights)
  return &weights_;
}

// repeated float biases = 7;
inline int LayerParam::biases_size() const {
  return biases_.size();
}
inline void LayerParam::clear_biases() {
  biases_.Clear();
}
inline float LayerParam::biases(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.biases)
  return biases_.Get(index);
}
inline void LayerParam::set_biases(int index, float value) {
  biases_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.biases)
}
inline void LayerParam::add_biases(float value) {
  biases_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.biases)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParam::biases() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.biases)
  return biases_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParam::mutable_biases() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.biases)
  return &biases_;
}

// repeated uint32 kernel_shape = 11;
inline int LayerParam::kernel_shape_size() const {
  return kernel_shape_.size();
}
inline void LayerParam::clear_kernel_shape() {
  kernel_shape_.Clear();
}
inline ::google::protobuf::uint32 LayerParam::kernel_shape(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.kernel_shape)
  return kernel_shape_.Get(index);
}
inline void LayerParam::set_kernel_shape(int index, ::google::protobuf::uint32 value) {
  kernel_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.kernel_shape)
}
inline void LayerParam::add_kernel_shape(::google::protobuf::uint32 value) {
  kernel_shape_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.kernel_shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LayerParam::kernel_shape() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.kernel_shape)
  return kernel_shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LayerParam::mutable_kernel_shape() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.kernel_shape)
  return &kernel_shape_;
}

// repeated uint32 stride = 12;
inline int LayerParam::stride_size() const {
  return stride_.size();
}
inline void LayerParam::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 LayerParam::stride(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.stride)
  return stride_.Get(index);
}
inline void LayerParam::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.stride)
}
inline void LayerParam::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LayerParam::stride() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LayerParam::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.stride)
  return &stride_;
}

// repeated uint32 padding = 13;
inline int LayerParam::padding_size() const {
  return padding_.size();
}
inline void LayerParam::clear_padding() {
  padding_.Clear();
}
inline ::google::protobuf::uint32 LayerParam::padding(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.padding)
  return padding_.Get(index);
}
inline void LayerParam::set_padding(int index, ::google::protobuf::uint32 value) {
  padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:network.LayerParam.padding)
}
inline void LayerParam::add_padding(::google::protobuf::uint32 value) {
  padding_.Add(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.padding)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LayerParam::padding() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.padding)
  return padding_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LayerParam::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.padding)
  return &padding_;
}

// optional uint32 dilation = 16 [default = 1];
inline bool LayerParam::has_dilation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParam::set_has_dilation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParam::clear_has_dilation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParam::clear_dilation() {
  dilation_ = 1u;
  clear_has_dilation();
}
inline ::google::protobuf::uint32 LayerParam::dilation() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.dilation)
  return dilation_;
}
inline void LayerParam::set_dilation(::google::protobuf::uint32 value) {
  set_has_dilation();
  dilation_ = value;
  // @@protoc_insertion_point(field_set:network.LayerParam.dilation)
}

// optional bool apply_col2im = 14 [default = true];
inline bool LayerParam::has_apply_col2im() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParam::set_has_apply_col2im() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParam::clear_has_apply_col2im() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParam::clear_apply_col2im() {
  apply_col2im_ = true;
  clear_has_apply_col2im();
}
inline bool LayerParam::apply_col2im() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.apply_col2im)
  return apply_col2im_;
}
inline void LayerParam::set_apply_col2im(bool value) {
  set_has_apply_col2im();
  apply_col2im_ = value;
  // @@protoc_insertion_point(field_set:network.LayerParam.apply_col2im)
}

// optional uint32 local_size = 15;
inline bool LayerParam::has_local_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParam::set_has_local_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParam::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParam::clear_local_size() {
  local_size_ = 0u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LayerParam::local_size() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.local_size)
  return local_size_;
}
inline void LayerParam::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:network.LayerParam.local_size)
}

// optional float alpha = 19 [default = 1];
inline bool LayerParam::has_alpha() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParam::set_has_alpha() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParam::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParam::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LayerParam::alpha() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.alpha)
  return alpha_;
}
inline void LayerParam::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:network.LayerParam.alpha)
}

// optional float beta = 20 [default = 0.75];
inline bool LayerParam::has_beta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParam::set_has_beta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParam::clear_has_beta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParam::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LayerParam::beta() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.beta)
  return beta_;
}
inline void LayerParam::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:network.LayerParam.beta)
}

// optional string pool_fn = 24;
inline bool LayerParam::has_pool_fn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParam::set_has_pool_fn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParam::clear_has_pool_fn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParam::clear_pool_fn() {
  pool_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_fn();
}
inline const ::std::string& LayerParam::pool_fn() const {
  // @@protoc_insertion_point(field_get:network.LayerParam.pool_fn)
  return pool_fn_.GetNoArena();
}
inline void LayerParam::set_pool_fn(const ::std::string& value) {
  set_has_pool_fn();
  pool_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.LayerParam.pool_fn)
}
#if LANG_CXX11
inline void LayerParam::set_pool_fn(::std::string&& value) {
  set_has_pool_fn();
  pool_fn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.LayerParam.pool_fn)
}
#endif
inline void LayerParam::set_pool_fn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_fn();
  pool_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.LayerParam.pool_fn)
}
inline void LayerParam::set_pool_fn(const char* value, size_t size) {
  set_has_pool_fn();
  pool_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.LayerParam.pool_fn)
}
inline ::std::string* LayerParam::mutable_pool_fn() {
  set_has_pool_fn();
  // @@protoc_insertion_point(field_mutable:network.LayerParam.pool_fn)
  return pool_fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParam::release_pool_fn() {
  // @@protoc_insertion_point(field_release:network.LayerParam.pool_fn)
  clear_has_pool_fn();
  return pool_fn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParam::set_allocated_pool_fn(::std::string* pool_fn) {
  if (pool_fn != NULL) {
    set_has_pool_fn();
  } else {
    clear_has_pool_fn();
  }
  pool_fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_fn);
  // @@protoc_insertion_point(field_set_allocated:network.LayerParam.pool_fn)
}

// repeated string class_names = 21;
inline int LayerParam::class_names_size() const {
  return class_names_.size();
}
inline void LayerParam::clear_class_names() {
  class_names_.Clear();
}
inline const ::std::string& LayerParam::class_names(int index) const {
  // @@protoc_insertion_point(field_get:network.LayerParam.class_names)
  return class_names_.Get(index);
}
inline ::std::string* LayerParam::mutable_class_names(int index) {
  // @@protoc_insertion_point(field_mutable:network.LayerParam.class_names)
  return class_names_.Mutable(index);
}
inline void LayerParam::set_class_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.LayerParam.class_names)
  class_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParam::set_class_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:network.LayerParam.class_names)
  class_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParam::set_class_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.LayerParam.class_names)
}
inline void LayerParam::set_class_names(int index, const char* value, size_t size) {
  class_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.LayerParam.class_names)
}
inline ::std::string* LayerParam::add_class_names() {
  // @@protoc_insertion_point(field_add_mutable:network.LayerParam.class_names)
  return class_names_.Add();
}
inline void LayerParam::add_class_names(const ::std::string& value) {
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.LayerParam.class_names)
}
#if LANG_CXX11
inline void LayerParam::add_class_names(::std::string&& value) {
  class_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.LayerParam.class_names)
}
#endif
inline void LayerParam::add_class_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.LayerParam.class_names)
}
inline void LayerParam::add_class_names(const char* value, size_t size) {
  class_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.LayerParam.class_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParam::class_names() const {
  // @@protoc_insertion_point(field_list:network.LayerParam.class_names)
  return class_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParam::mutable_class_names() {
  // @@protoc_insertion_point(field_mutable_list:network.LayerParam.class_names)
  return &class_names_;
}

// -------------------------------------------------------------------

// Layer

// required string name = 22;
inline bool Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:network.Layer.name)
  return name_.GetNoArena();
}
inline void Layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Layer.name)
}
#if LANG_CXX11
inline void Layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.Layer.name)
}
#endif
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Layer.name)
}
inline void Layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Layer.name)
}
inline ::std::string* Layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:network.Layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:network.Layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:network.Layer.name)
}

// required string type = 23;
inline bool Layer::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Layer::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Layer::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Layer::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Layer::type() const {
  // @@protoc_insertion_point(field_get:network.Layer.type)
  return type_.GetNoArena();
}
inline void Layer::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Layer.type)
}
#if LANG_CXX11
inline void Layer::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.Layer.type)
}
#endif
inline void Layer::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Layer.type)
}
inline void Layer::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Layer.type)
}
inline ::std::string* Layer::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:network.Layer.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layer::release_type() {
  // @@protoc_insertion_point(field_release:network.Layer.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:network.Layer.type)
}

// required .network.LayerParam params = 2;
inline bool Layer::has_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Layer::set_has_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Layer::clear_has_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Layer::clear_params() {
  if (params_ != NULL) params_->::network::LayerParam::Clear();
  clear_has_params();
}
inline const ::network::LayerParam& Layer::params() const {
  // @@protoc_insertion_point(field_get:network.Layer.params)
  return params_ != NULL ? *params_
                         : *::network::LayerParam::internal_default_instance();
}
inline ::network::LayerParam* Layer::mutable_params() {
  set_has_params();
  if (params_ == NULL) {
    params_ = new ::network::LayerParam;
  }
  // @@protoc_insertion_point(field_mutable:network.Layer.params)
  return params_;
}
inline ::network::LayerParam* Layer::release_params() {
  // @@protoc_insertion_point(field_release:network.Layer.params)
  clear_has_params();
  ::network::LayerParam* temp = params_;
  params_ = NULL;
  return temp;
}
inline void Layer::set_allocated_params(::network::LayerParam* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:network.Layer.params)
}

// repeated string prev = 3;
inline int Layer::prev_size() const {
  return prev_.size();
}
inline void Layer::clear_prev() {
  prev_.Clear();
}
inline const ::std::string& Layer::prev(int index) const {
  // @@protoc_insertion_point(field_get:network.Layer.prev)
  return prev_.Get(index);
}
inline ::std::string* Layer::mutable_prev(int index) {
  // @@protoc_insertion_point(field_mutable:network.Layer.prev)
  return prev_.Mutable(index);
}
inline void Layer::set_prev(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.Layer.prev)
  prev_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Layer::set_prev(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:network.Layer.prev)
  prev_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Layer::set_prev(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prev_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.Layer.prev)
}
inline void Layer::set_prev(int index, const char* value, size_t size) {
  prev_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.Layer.prev)
}
inline ::std::string* Layer::add_prev() {
  // @@protoc_insertion_point(field_add_mutable:network.Layer.prev)
  return prev_.Add();
}
inline void Layer::add_prev(const ::std::string& value) {
  prev_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.Layer.prev)
}
#if LANG_CXX11
inline void Layer::add_prev(::std::string&& value) {
  prev_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.Layer.prev)
}
#endif
inline void Layer::add_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prev_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.Layer.prev)
}
inline void Layer::add_prev(const char* value, size_t size) {
  prev_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.Layer.prev)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Layer::prev() const {
  // @@protoc_insertion_point(field_list:network.Layer.prev)
  return prev_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Layer::mutable_prev() {
  // @@protoc_insertion_point(field_mutable_list:network.Layer.prev)
  return &prev_;
}

// repeated string next = 4;
inline int Layer::next_size() const {
  return next_.size();
}
inline void Layer::clear_next() {
  next_.Clear();
}
inline const ::std::string& Layer::next(int index) const {
  // @@protoc_insertion_point(field_get:network.Layer.next)
  return next_.Get(index);
}
inline ::std::string* Layer::mutable_next(int index) {
  // @@protoc_insertion_point(field_mutable:network.Layer.next)
  return next_.Mutable(index);
}
inline void Layer::set_next(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.Layer.next)
  next_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Layer::set_next(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:network.Layer.next)
  next_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Layer::set_next(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  next_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.Layer.next)
}
inline void Layer::set_next(int index, const char* value, size_t size) {
  next_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.Layer.next)
}
inline ::std::string* Layer::add_next() {
  // @@protoc_insertion_point(field_add_mutable:network.Layer.next)
  return next_.Add();
}
inline void Layer::add_next(const ::std::string& value) {
  next_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.Layer.next)
}
#if LANG_CXX11
inline void Layer::add_next(::std::string&& value) {
  next_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.Layer.next)
}
#endif
inline void Layer::add_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  next_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.Layer.next)
}
inline void Layer::add_next(const char* value, size_t size) {
  next_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.Layer.next)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Layer::next() const {
  // @@protoc_insertion_point(field_list:network.Layer.next)
  return next_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Layer::mutable_next() {
  // @@protoc_insertion_point(field_mutable_list:network.Layer.next)
  return &next_;
}

// -------------------------------------------------------------------

// Network

// required string name = 1;
inline bool Network::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Network::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Network::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Network::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Network::name() const {
  // @@protoc_insertion_point(field_get:network.Network.name)
  return name_.GetNoArena();
}
inline void Network::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Network.name)
}
#if LANG_CXX11
inline void Network::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.Network.name)
}
#endif
inline void Network::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Network.name)
}
inline void Network::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Network.name)
}
inline ::std::string* Network::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:network.Network.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_name() {
  // @@protoc_insertion_point(field_release:network.Network.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:network.Network.name)
}

// required uint32 num_layers = 5;
inline bool Network::has_num_layers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Network::set_has_num_layers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Network::clear_has_num_layers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Network::clear_num_layers() {
  num_layers_ = 0u;
  clear_has_num_layers();
}
inline ::google::protobuf::uint32 Network::num_layers() const {
  // @@protoc_insertion_point(field_get:network.Network.num_layers)
  return num_layers_;
}
inline void Network::set_num_layers(::google::protobuf::uint32 value) {
  set_has_num_layers();
  num_layers_ = value;
  // @@protoc_insertion_point(field_set:network.Network.num_layers)
}

// optional bool use_threads = 17 [default = false];
inline bool Network::has_use_threads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Network::set_has_use_threads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Network::clear_has_use_threads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Network::clear_use_threads() {
  use_threads_ = false;
  clear_has_use_threads();
}
inline bool Network::use_threads() const {
  // @@protoc_insertion_point(field_get:network.Network.use_threads)
  return use_threads_;
}
inline void Network::set_use_threads(bool value) {
  set_has_use_threads();
  use_threads_ = value;
  // @@protoc_insertion_point(field_set:network.Network.use_threads)
}

// optional bool use_gpu = 18 [default = true];
inline bool Network::has_use_gpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Network::set_has_use_gpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Network::clear_has_use_gpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Network::clear_use_gpu() {
  use_gpu_ = true;
  clear_has_use_gpu();
}
inline bool Network::use_gpu() const {
  // @@protoc_insertion_point(field_get:network.Network.use_gpu)
  return use_gpu_;
}
inline void Network::set_use_gpu(bool value) {
  set_has_use_gpu();
  use_gpu_ = value;
  // @@protoc_insertion_point(field_set:network.Network.use_gpu)
}

// repeated .network.Layer layers = 8;
inline int Network::layers_size() const {
  return layers_.size();
}
inline void Network::clear_layers() {
  layers_.Clear();
}
inline const ::network::Layer& Network::layers(int index) const {
  // @@protoc_insertion_point(field_get:network.Network.layers)
  return layers_.Get(index);
}
inline ::network::Layer* Network::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:network.Network.layers)
  return layers_.Mutable(index);
}
inline ::network::Layer* Network::add_layers() {
  // @@protoc_insertion_point(field_add:network.Network.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::network::Layer >*
Network::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:network.Network.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::network::Layer >&
Network::layers() const {
  // @@protoc_insertion_point(field_list:network.Network.layers)
  return layers_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace network

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_2eproto__INCLUDED
